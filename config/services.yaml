# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
#    api_critical_error_user_message: 'Critical error'
    jwt_token_ttl: '%env(JWT_TOKEN_TTL)%'
    api_exception_user_message: 'Internal server error'
    api_orm_exception_user_message: 'Database error'
    facebook_app_id: '%env(FACEBOOK_APP_ID)%'
    facebook_app_secret: '%env(FACEBOOK_APP_SECRET)%'
    app.path.user_avatar_image: '/uploads/images/user/avatar'
    app.path.user_image_gallery: '/uploads/images/user/gallery'
    app.path.user_video_gallery: '/uploads/videos/user/gallery'
    app.path.user_video_thumbnail: '/uploads/images/user/video/thumbnail'
    deploy:
        dev:
            host: '%env(DEV_SERVER_HOST)%'
            username: '%env(DEV_SERVER_USERNAME)%'
            password: '%env(DEV_SERVER_PASSWORD)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    app_api_v1_social_auth_service:
        class: App\Service\Api\V1\SocialAuthService
        arguments: ['@service_container']

    app_api_v1_user_service:
        class: App\Service\Api\V1\UserService
        arguments: ['@service_container']

    app_api_v1_phone_service:
        class: App\Service\Api\V1\UserPhoneService
        arguments:
            - '@service_container'
            - '@app_api_v1_sms_service'
            - '@session'

    app_api_v1_sms_service:
        class: App\Service\Api\V1\SmsService

    app_api_v1_recovery_passwrod_service:
        class: App\Service\Api\V1\RecoveryPasswordService

    app_api_v1_jwt_service:
        class: App\Service\Api\V1\JWTService
        public: true

    App\EventListener\User\PasswordListener:
        tags:
            -
                # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'prePersist'
                entity: 'App\Entity\AdminUser'
                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true
            -
                name: 'doctrine.orm.entity_listener'
                event: 'preUpdate'
                entity: 'App\Entity\AdminUser'
                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true
            -
                # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'prePersist'
                entity: 'App\Entity\User'
                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true
            -
                name: 'doctrine.orm.entity_listener'
                event: 'preUpdate'
                entity: 'App\Entity\User'
                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true